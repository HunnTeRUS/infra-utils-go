// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HunnTeRUS/infra-utils-go/health (interfaces: HealthInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	log "github.com/HunnTeRUS/infra-utils-go/configuration/logger"
	health "github.com/HunnTeRUS/infra-utils-go/health"
	gomock "github.com/golang/mock/gomock"
)

// MockHealthInterface is a mock of HealthInterface interface.
type MockHealthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHealthInterfaceMockRecorder
}

// MockHealthInterfaceMockRecorder is the mock recorder for MockHealthInterface.
type MockHealthInterfaceMockRecorder struct {
	mock *MockHealthInterface
}

// NewMockHealthInterface creates a new mock instance.
func NewMockHealthInterface(ctrl *gomock.Controller) *MockHealthInterface {
	mock := &MockHealthInterface{ctrl: ctrl}
	mock.recorder = &MockHealthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthInterface) EXPECT() *MockHealthInterfaceMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockHealthInterface) HealthCheck(arg0 log.Logger, arg1 ...health.HealthChecker) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "HealthCheck", varargs...)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHealthInterfaceMockRecorder) HealthCheck(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHealthInterface)(nil).HealthCheck), varargs...)
}
