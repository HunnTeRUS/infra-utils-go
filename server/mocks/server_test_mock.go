// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HunnTeRUS/infra-utils-go/server (interfaces: ServerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	log "github.com/HunnTeRUS/infra-utils-go/configuration/logger"
	health "github.com/HunnTeRUS/infra-utils-go/health"
	gomock "github.com/golang/mock/gomock"
)

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockServerInterface) Start(arg0 http.Handler, arg1 string, arg2 log.Logger, arg3 ...health.HealthChecker) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Start", varargs...)
}

// Start indicates an expected call of Start.
func (mr *MockServerInterfaceMockRecorder) Start(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServerInterface)(nil).Start), varargs...)
}
